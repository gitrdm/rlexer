[{"path":[]},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://gitrdm.github.io/rlexer/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://gitrdm.github.io/rlexer/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to rlexer","title":"Contributing to rlexer","text":"outlines propose change rlexer. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://gitrdm.github.io/rlexer/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to rlexer","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://gitrdm.github.io/rlexer/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to rlexer","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://gitrdm.github.io/rlexer/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to rlexer","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"gitrdm/rlexer\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://gitrdm.github.io/rlexer/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to rlexer","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://gitrdm.github.io/rlexer/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to rlexer","text":"Please note rlexer project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://gitrdm.github.io/rlexer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rlexer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gitrdm.github.io/rlexer/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with rlexer","title":"Getting help with rlexer","text":"Thanks using rlexer! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://gitrdm.github.io/rlexer/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with rlexer","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://gitrdm.github.io/rlexer/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with rlexer","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://gitrdm.github.io/rlexer/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with rlexer","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://gitrdm.github.io/rlexer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"gitrdm. Author, maintainer.","code":""},{"path":"https://gitrdm.github.io/rlexer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"gitrdm (2024). rlexer: Lexer/Scanner LOX language. R package version 0.0.0.9000, https://gitrdm.github.io/rlexer/, https://github.com/gitrdm/rlexer.","code":"@Manual{,   title = {rlexer: Lexer/Scanner for LOX language},   author = {{gitrdm}},   year = {2024},   note = {R package version 0.0.0.9000, https://gitrdm.github.io/rlexer/},   url = {https://github.com/gitrdm/rlexer}, }"},{"path":"https://gitrdm.github.io/rlexer/index.html","id":"rlexer","dir":"","previous_headings":"","what":"Lexer/Scanner for LOX language","title":"Lexer/Scanner for LOX language","text":"goal rlexer lexer programming language LOX described book Crafting Interpreters Bob Nystrom. scanner complete passes tests book. next step implement parser interpreter.","code":""},{"path":"https://gitrdm.github.io/rlexer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Lexer/Scanner for LOX language","text":"can install development version rlexer GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"gitrdm/rlexer\")"},{"path":"https://gitrdm.github.io/rlexer/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Lexer/Scanner for LOX language","text":"basic example shows scanner called:","code":"library(rlexer) ## basic example code input <- \"andy _ _123 _abc ab123 abc_\" scanner <- Scanner$new(input) tokens <- scanner$scanTokens()  print(tokens) #> [[1]] #> [[1]]$type #> [1] \"IDENTIFIER\" #>  #> [[1]]$lexeme #> [1] \"andy\" #>  #> [[1]]$literal #> NULL #>  #> [[1]]$line #> [1] 1 #>  #>  #> [[2]] #> [[2]]$type #> [1] \"IDENTIFIER\" #>  #> [[2]]$lexeme #> [1] \"_\" #>  #> [[2]]$literal #> NULL #>  #> [[2]]$line #> [1] 1 #>  #>  #> [[3]] #> [[3]]$type #> [1] \"IDENTIFIER\" #>  #> [[3]]$lexeme #> [1] \"_123\" #>  #> [[3]]$literal #> NULL #>  #> [[3]]$line #> [1] 1 #>  #>  #> [[4]] #> [[4]]$type #> [1] \"IDENTIFIER\" #>  #> [[4]]$lexeme #> [1] \"_abc\" #>  #> [[4]]$literal #> NULL #>  #> [[4]]$line #> [1] 1 #>  #>  #> [[5]] #> [[5]]$type #> [1] \"IDENTIFIER\" #>  #> [[5]]$lexeme #> [1] \"ab123\" #>  #> [[5]]$literal #> NULL #>  #> [[5]]$line #> [1] 1 #>  #>  #> [[6]] #> [[6]]$type #> [1] \"IDENTIFIER\" #>  #> [[6]]$lexeme #> [1] \"abc_\" #>  #> [[6]]$literal #> NULL #>  #> [[6]]$line #> [1] 1 #>  #>  #> [[7]] #> [[7]]$type #> [1] \"EOF\" #>  #> [[7]]$lexeme #> NULL #>  #> [[7]]$literal #> NULL #>  #> [[7]]$line #> [1] 1"},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":null,"dir":"Reference","previous_headings":"","what":"Scanner Class — Scanner","title":"Scanner Class — Scanner","text":"class designed lexical analysis, converting source string list tokens.","code":""},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Scanner Class — Scanner","text":"source source code string scanned. tokens list store tokens generated source code. start index first character current lexeme scanned. current index current character scanned. line current line number source code.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Scanner Class — Scanner","text":"Scanner$new() Scanner$scanTokens() Scanner$scanToken() Scanner$identifier() Scanner$number() Scanner$string() Scanner$match() Scanner$peek() Scanner$peekNext() Scanner$isAlpha() Scanner$isAlphaNumeric() Scanner$isDigit() Scanner$isAtEnd() Scanner$advance() Scanner$addToken() Scanner$clone()","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$new(source)"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scanner Class — Scanner","text":"source Scan Tokens Scans source code generates list tokens.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$scanTokens()"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"list tokens. Scan Single Token Scans identifies next token source code.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$scanToken()"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"next token. Scan Identifier Scans identifies identifier token.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$identifier()"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"identifier token. Scan Number Scans identifies numeric token.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$number()"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"numeric token. Scan String Scans identifies string token.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$string()"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"string token. Scan String Scans identifies string token. Match Character Checks next character matches expected character.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$match(expected)"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scanner Class — Scanner","text":"expected expected character.","code":""},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"TRUE next character matches expected character, FALSE otherwise. Peek Returns current character without advancing scanner.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$peek()"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"current character. Peek Next Returns next character without advancing scanner.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$peekNext()"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"next character. Check Alpha Checks character alphabetical character.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$isAlpha(c)"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scanner Class — Scanner","text":"c character check.","code":""},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"TRUE character alphabetical, FALSE otherwise. Check AlphaNumeric Checks character alphanumeric.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$isAlphaNumeric(c)"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scanner Class — Scanner","text":"c character check.","code":""},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"TRUE character alphanumeric, FALSE otherwise. Check Digit Checks character digit.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$isDigit(c)"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scanner Class — Scanner","text":"c character check.","code":""},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"TRUE character digit, FALSE otherwise. Check End Checks scanner reached end source code.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$isAtEnd()"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"TRUE scanner end source code, FALSE otherwise. Advance Advances scanner next character.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$advance()"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Scanner Class — Scanner","text":"next character. Add Token Adds new token list tokens.","code":""},{"path":[]},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$addToken(type, literal = NULL)"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scanner Class — Scanner","text":"type type token. literal literal value token (optional).","code":""},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Scanner Class — Scanner","text":"objects class cloneable method.","code":""},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Scanner Class — Scanner","text":"","code":"Scanner$clone(deep = FALSE)"},{"path":"https://gitrdm.github.io/rlexer/reference/Scanner.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scanner Class — Scanner","text":"deep Whether make deep clone.","code":""},{"path":"https://gitrdm.github.io/rlexer/reference/keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"Keywords — keywords","title":"Keywords — keywords","text":"list reserved keywords corresponding token types.","code":""},{"path":"https://gitrdm.github.io/rlexer/reference/keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keywords — keywords","text":"","code":"keywords"},{"path":"https://gitrdm.github.io/rlexer/reference/keywords.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Keywords — keywords","text":"object class list length 16.","code":""}]
